{"ast":null,"code":"/**\n * CIE XYZ\n *\n * @module  color-space/xyz\n */\nimport rgb from './rgb.js';\nvar xyz = {\n  name: 'xyz',\n  min: [0, 0, 0],\n  channel: ['X', 'Y', 'Z'],\n  alias: ['XYZ', 'ciexyz', 'cie1931']\n};\n\n/**\n * Whitepoint reference values with observer/illuminant\n *\n * http://en.wikipedia.org/wiki/Standard_illuminant\n */\nxyz.whitepoint = {\n  //1931 2°\n  2: {\n    //incadescent\n    A: [109.85, 100, 35.585],\n    // B:[],\n    C: [98.074, 100, 118.232],\n    D50: [96.422, 100, 82.521],\n    D55: [95.682, 100, 92.149],\n    //daylight\n    D65: [95.045592705167, 100, 108.9057750759878],\n    D75: [94.972, 100, 122.638],\n    //flourescent\n    // F1: [],\n    F2: [99.187, 100, 67.395],\n    // F3: [],\n    // F4: [],\n    // F5: [],\n    // F6:[],\n    F7: [95.044, 100, 108.755],\n    // F8: [],\n    // F9: [],\n    // F10: [],\n    F11: [100.966, 100, 64.370],\n    // F12: [],\n    E: [100, 100, 100]\n  },\n  //1964  10°\n  10: {\n    //incadescent\n    A: [111.144, 100, 35.200],\n    C: [97.285, 100, 116.145],\n    D50: [96.720, 100, 81.427],\n    D55: [95.799, 100, 90.926],\n    //daylight\n    D65: [94.811, 100, 107.304],\n    D75: [94.416, 100, 120.641],\n    //flourescent\n    F2: [103.280, 100, 69.026],\n    F7: [95.792, 100, 107.687],\n    F11: [103.866, 100, 65.627],\n    E: [100, 100, 100]\n  }\n};\n\n/**\n * Top values are the whitepoint’s top values, default are D65\n */\nxyz.max = xyz.whitepoint[2].D65;\n\n/**\n * Transform xyz to rgb\n *\n * @param {Array} xyz Array of xyz values\n *\n * @return {Array} RGB values\n */\nxyz.rgb = function (_xyz, white) {\n  //FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\n  white = white || xyz.whitepoint[2].E;\n  var x = _xyz[0] / white[0],\n    y = _xyz[1] / white[1],\n    z = _xyz[2] / white[2],\n    r,\n    g,\n    b;\n\n  // assume sRGB\n  // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n  r = x * 3.240969941904521 + y * -1.537383177570093 + z * -0.498610760293;\n  g = x * -0.96924363628087 + y * 1.87596750150772 + z * 0.041555057407175;\n  b = x * 0.055630079696993 + y * -0.20397695888897 + z * 1.056971514242878;\n  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n  r = Math.min(Math.max(0, r), 1);\n  g = Math.min(Math.max(0, g), 1);\n  b = Math.min(Math.max(0, b), 1);\n  return [r * 255, g * 255, b * 255];\n};\n\n/**\n * RGB to XYZ\n *\n * @param {Array} rgb RGB channels\n *\n * @return {Array} XYZ channels\n */\nrgb.xyz = function (rgb, white) {\n  var r = rgb[0] / 255,\n    g = rgb[1] / 255,\n    b = rgb[2] / 255;\n\n  // assume sRGB\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n  var x = r * 0.41239079926595 + g * 0.35758433938387 + b * 0.18048078840183;\n  var y = r * 0.21263900587151 + g * 0.71516867876775 + b * 0.072192315360733;\n  var z = r * 0.019330818715591 + g * 0.11919477979462 + b * 0.95053215224966;\n  white = white || xyz.whitepoint[2].E;\n  return [x * white[0], y * white[1], z * white[2]];\n};\nexport default xyz;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}