{"ast":null,"code":"/**\n * @module ol/layer/Heatmap\n */\nimport { listen } from '../events.js';\nimport { getChangeEventType } from '../Object.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport VectorLayer from './Vector.js';\nimport { clamp } from '../math.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport Icon from '../style/Icon.js';\nimport Style from '../style/Style.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {number} [shadow=250] Shadow size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"./VectorRenderType.js\").default|string} [renderMode='vector'] Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\n *    animations, but slower performance.\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nvar DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nvar Heatmap = /*@__PURE__*/function (VectorLayer) {\n  function Heatmap(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.shadow;\n    delete baseOptions.weight;\n    VectorLayer.call(this, baseOptions);\n\n    /**\n     * @private\n     * @type {Uint8ClampedArray}\n     */\n    this.gradient_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.shadow_ = options.shadow !== undefined ? options.shadow : 250;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.circleImage_ = undefined;\n\n    /**\n     * @private\n     * @type {Array<Array<import(\"../style/Style.js\").default>>}\n     */\n    this.styleCache_ = null;\n    listen(this, getChangeEventType(Property.GRADIENT), this.handleGradientChanged_, this);\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n    listen(this, getChangeEventType(Property.BLUR), this.handleStyleChanged_, this);\n    listen(this, getChangeEventType(Property.RADIUS), this.handleStyleChanged_, this);\n    this.handleStyleChanged_();\n    var weight = options.weight ? options.weight : 'weight';\n    var weightFunction;\n    if (typeof weight === 'string') {\n      weightFunction = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      weightFunction = weight;\n    }\n    this.setStyle(function (feature, resolution) {\n      var weight = weightFunction(feature);\n      var opacity = weight !== undefined ? clamp(weight, 0, 1) : 1;\n      // cast to 8 bits\n      var index = 255 * opacity | 0;\n      var style = this.styleCache_[index];\n      if (!style) {\n        style = [new Style({\n          image: new Icon({\n            opacity: opacity,\n            src: this.circleImage_\n          })\n        })];\n        this.styleCache_[index] = style;\n      }\n      return style;\n    }.bind(this));\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n    listen(this, RenderEventType.RENDER, this.handleRender_, this);\n  }\n  if (VectorLayer) Heatmap.__proto__ = VectorLayer;\n  Heatmap.prototype = Object.create(VectorLayer && VectorLayer.prototype);\n  Heatmap.prototype.constructor = Heatmap;\n\n  /**\n   * @return {string} Data URL for a circle.\n   * @private\n   */\n  Heatmap.prototype.createCircle_ = function createCircle_() {\n    var radius = this.getRadius();\n    var blur = this.getBlur();\n    var halfSize = radius + blur + 1;\n    var size = 2 * halfSize;\n    var context = createCanvasContext2D(size, size);\n    context.shadowOffsetX = context.shadowOffsetY = this.shadow_;\n    context.shadowBlur = blur;\n    context.shadowColor = '#000';\n    context.beginPath();\n    var center = halfSize - this.shadow_;\n    context.arc(center, center, radius, 0, Math.PI * 2, true);\n    context.fill();\n    return context.canvas.toDataURL();\n  };\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getBlur = function getBlur() {\n    return /** @type {number} */this.get(Property.BLUR);\n  };\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getGradient = function getGradient() {\n    return /** @type {Array<string>} */this.get(Property.GRADIENT);\n  };\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getRadius = function getRadius() {\n    return /** @type {number} */this.get(Property.RADIUS);\n  };\n\n  /**\n   * @private\n   */\n  Heatmap.prototype.handleGradientChanged_ = function handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  };\n\n  /**\n   * @private\n   */\n  Heatmap.prototype.handleStyleChanged_ = function handleStyleChanged_() {\n    this.circleImage_ = this.createCircle_();\n    this.styleCache_ = new Array(256);\n    this.changed();\n  };\n\n  /**\n   * @param {import(\"../render/Event.js\").default} event Post compose event\n   * @private\n   */\n  Heatmap.prototype.handleRender_ = function handleRender_(event) {\n    var context = event.context;\n    var canvas = context.canvas;\n    var image = context.getImageData(0, 0, canvas.width, canvas.height);\n    var view8 = image.data;\n    for (var i = 0, ii = view8.length; i < ii; i += 4) {\n      var alpha = view8[i + 3] * 4;\n      if (alpha) {\n        view8[i] = this.gradient_[alpha];\n        view8[i + 1] = this.gradient_[alpha + 1];\n        view8[i + 2] = this.gradient_[alpha + 2];\n      }\n    }\n    context.putImageData(image, 0, 0);\n  };\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setBlur = function setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  };\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setGradient = function setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  };\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setRadius = function setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  };\n  return Heatmap;\n}(VectorLayer);\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {Uint8ClampedArray} An array.\n */\nfunction createGradient(colors) {\n  var width = 1;\n  var height = 256;\n  var context = createCanvasContext2D(width, height);\n  var gradient = context.createLinearGradient(0, 0, width, height);\n  var step = 1 / (colors.length - 1);\n  for (var i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.getImageData(0, 0, width, height).data;\n}\nexport default Heatmap;\n\n//# sourceMappingURL=Heatmap.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}