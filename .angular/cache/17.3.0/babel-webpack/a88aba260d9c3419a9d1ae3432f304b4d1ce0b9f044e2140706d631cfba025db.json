{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormPersonaDTO } from 'src/app/models/form-persona-dto';\nimport { ErrorDTO } from 'src/app/models/error-dto';\nimport { Localidad } from 'src/app/models/localidad';\nimport { FotoIdentificacion } from 'src/app/models/foto-identificacion';\nlet AdministrarPersonasComponent = class AdministrarPersonasComponent {\n  constructor(mensajeError = ErrorDTO.mensajeError, personaService, toastr, provinciaLocalidadService, fotoIdentificacionService, spinner) {\n    this.personaService = personaService;\n    this.toastr = toastr;\n    this.provinciaLocalidadService = provinciaLocalidadService;\n    this.fotoIdentificacionService = fotoIdentificacionService;\n    this.spinner = spinner;\n    this.personaDTOSelleccionada = new FormPersonaDTO();\n    this.fotoIdentificacion = new FotoIdentificacion();\n    this.fecha = new Date();\n    this.maxDatePicker = {\n      year: this.fecha.getFullYear(),\n      month: this.fecha.getMonth() + 1,\n      day: this.fecha.getDate()\n    };\n    this.localidad = new Localidad();\n    //CONDOCIONALES PARA FORM\n    this.mostrarImagen = false;\n    this.imagenSeleccionada = null;\n    this.hayError = false;\n    this.editarBandera = false;\n    this.roles = ['DAMNIFICADA', 'VICTIMARIO'];\n  }\n  ngOnInit() {\n    this.getPersonas();\n    this.getProvincias();\n    this.editarBandera = false;\n  }\n  getPersonas() {\n    this.spinner.show();\n    this.personaService.getPersonas().subscribe(res => {\n      this.spinner.hide();\n      this.personaService.personas = res;\n      console.log(res);\n    });\n  }\n  guardarPersona(personaForm) {\n    this.personaDTOSelleccionada.usuario.rolDeUsuario = this.rolSeleccionado;\n    let ngbDate = personaForm.value.fechaNacimiento;\n    let myDate = new Date(ngbDate.year, ngbDate.month - 1, ngbDate.day + 1);\n    this.personaDTOSelleccionada.persona.fechaNacimiento = myDate;\n    if (this.editarBandera == true) {\n      this.spinner.show();\n      this.personaService.putPersona(this.personaDTOSelleccionada).subscribe(res => {\n        console.log(res);\n        this.getPersonas();\n        personaForm.reset();\n        this.editarBandera = false;\n        this.personaDTOSelleccionada = new FormPersonaDTO();\n        this.spinner.hide();\n      });\n    } else {\n      this.agregarPersona(personaForm);\n    }\n    this.editarBandera = false;\n  }\n  agregarPersona(personaForm) {\n    this.spinner.show();\n    //CARGO DATOS DEL FORM A PERSONA\n    this.personaDTOSelleccionada.usuario.rolDeUsuario = this.rolSeleccionado;\n    let ngbDate = personaForm.value.fechaNacimiento;\n    let myDate = new Date(ngbDate.year, ngbDate.month - 1, ngbDate.day);\n    this.personaDTOSelleccionada.persona.fechaNacimiento = myDate;\n    //Logica para leer el archivo y guardarlo\n    //Guardo la instancia del componente para usar dentro de la promesa, y el BLOB\n    var imgSeleccionadaBlob;\n    let thisjr = this;\n    imgSeleccionadaBlob = new Blob([this.imagenSeleccionada]);\n    //Creo la promesa para guardar la foto despuÃ©s de cargarla completamente\n    var promise = new Promise(getBuffer);\n    // Espero a terminar la funcion de la promesa, y entonces guardo.\n    promise.then(function (imgBase64) {\n      let img = imgBase64;\n      thisjr.personaDTOSelleccionada.foto = img;\n      thisjr.personaService.postPersona(thisjr.personaDTOSelleccionada).subscribe(res => {\n        var error = res;\n        if (error.hayError) {\n          //MOSTRAR ERROR\n          thisjr.toastr.error(\"\" + error.mensajeError, \"Error!\");\n          thisjr.setHayError();\n          this.spinner.hide();\n        } else {\n          thisjr.toastr.success(\"Persona agregada correctamente\", \"Agregada!\");\n          console.log(thisjr.personaDTOSelleccionada);\n          thisjr.getPersonas();\n          personaForm.reset();\n          this.spinner.hide();\n        }\n      });\n    });\n    //Funcion para usar en la promesa para esperar a que se cargue la foto\n    function getBuffer(resolve) {\n      var fileReader = new FileReader();\n      fileReader.readAsDataURL(imgSeleccionadaBlob);\n      fileReader.onload = function () {\n        var imgBase64 = fileReader.result;\n        resolve(imgBase64);\n      };\n    }\n  }\n  setHayError() {\n    this.hayError = true;\n    setTimeout(() => {\n      this.hayError = false;\n    }, 5000);\n  }\n  archivoSeleccionado(event) {\n    //Obtengo la imagen seleccionada\n    this.imagenSeleccionada = event.target.files[0];\n    if (this.imagenSeleccionada != null) document.getElementById(\"labelImagen\").innerHTML = \"\" + this.imagenSeleccionada.name;else document.getElementById(\"labelImagen\").innerHTML = \"Choose File\";\n  }\n  eliminarPersona(persona) {\n    console.log(persona.persona.idPersona);\n    this.personaService.deletePersona(persona.persona.idPersona).subscribe(res => {\n      var error = res;\n      if (error.hayError) {\n        //MOSTRAR ERROR\n        this.toastr.error(\"\" + error.mensajeError, \"Error!\");\n      } else {\n        this.toastr.success('Persona eliminada correctamente', 'Eliminada!');\n        this.getPersonas();\n      }\n    });\n  }\n  //SELECCION DE ROL PARA MOSTRAR U OCULTAR IMAGEN\n  cambioRol() {\n    if (this.rolSeleccionado == \"VICTIMARIO\") this.mostrarImagen = true;else this.mostrarImagen = false;\n  }\n  //Obtener las provincias\n  getProvincias() {\n    this.spinner.show();\n    this.provinciaLocalidadService.getProvincias().subscribe(res => {\n      this.spinner.hide();\n      this.provincias = res;\n    });\n  }\n  //SELECCION DE PROVINCIA PARA LLENAR LAS LOCALIDADES\n  cambioProvincia() {\n    for (var i = 0; i < this.provincias.length; i++) {\n      if (this.provincias[i].nombre == this.provinciaSeleccionada) this.getLocalidades(this.provincias[i].idProvincia);\n    }\n  }\n  //SE LLENA LAS LOCALIDADES SEGUN PROVINCIA\n  getLocalidades(idProvincia) {\n    this.spinner.show();\n    this.localidades = null;\n    this.provinciaLocalidadService.getLocalidades(idProvincia).subscribe(res => {\n      this.spinner.hide();\n      this.localidades = res;\n      if (this.localidad.nombre != \"\") {\n        this.localidadSeleccionada = this.localidad.nombre;\n      }\n    });\n  }\n  //SELECCION DE LOCALIDAD\n  cambioLocalidad() {\n    for (var i = 0; i < this.localidades.length; i++) {\n      if (this.localidades[i].nombre == this.localidadSeleccionada) {\n        this.personaDTOSelleccionada.direccion.idLocalidad = this.localidades[i].idLocalidad;\n        return;\n      }\n    }\n  }\n  editarPersona(persona) {\n    this.editarBandera = true;\n    this.localidadSeleccionada = \"\";\n    this.localidad = new Localidad();\n    this.personaDTOSelleccionada = persona;\n    this.rolSeleccionado = persona.usuario.rolDeUsuario;\n    let date = new Date(persona.persona.fechaNacimiento);\n    this.fechaMarcador = {\n      year: date.getFullYear(),\n      month: date.getMonth() + 1,\n      day: date.getDate() + 1\n    };\n    this.getLocalidad(persona.direccion.idLocalidad);\n    this.cambioRol();\n    console.log(persona);\n  }\n  //BUSCO LA LOCALIDAD DE LA PERSONA PARA TOMAR LA PROVINCIA \n  //Y LLENO LOS COMBOS\n  getLocalidad(idLocalidad) {\n    this.spinner.show();\n    this.provinciaLocalidadService.getLocalidad(idLocalidad).subscribe(res => {\n      this.spinner.hide();\n      this.localidad = res;\n      for (let i = 0; i < this.provincias.length; i++) {\n        if (this.provincias[i].idProvincia == this.localidad.idProvincia) {\n          this.provinciaSeleccionada = this.provincias[i].nombre;\n          this.getLocalidades(this.localidad.idProvincia);\n        }\n      }\n    });\n  }\n};\nAdministrarPersonasComponent = __decorate([Component({\n  selector: 'app-administrar-personas',\n  templateUrl: './administrar-personas.component.html',\n  styleUrls: ['./administrar-personas.component.css']\n})], AdministrarPersonasComponent);\nexport { AdministrarPersonasComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}